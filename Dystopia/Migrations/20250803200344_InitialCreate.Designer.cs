// <auto-generated />
using System;
using Dystopia.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dystopia.Migrations
{
    [DbContext(typeof(PolydystopiaDbContext))]
    [Migration("20250803200344_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("Dystopia.Database.Friendship.FriendshipEntity", b =>
                {
                    b.Property<Guid>("UserId1")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId2")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId1", "UserId2");

                    b.HasIndex("UserId2");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Dystopia.Database.Game.GameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("CurrentGameStateData")
                        .HasColumnType("BLOB");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCurrentTurnDeadline")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastCommand")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ExternalMatchId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ExternalTournamentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("GameSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("InitialGameStateData")
                        .HasColumnType("BLOB");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimerSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Dystopia.Database.Lobby.LobbyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Bots")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ChallengermodeGameId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisabledTribes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ExternalMatchId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ExternalTournamentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("GameMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InviteLink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MapPreset")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapSize")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("MatchmakingGameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Participators")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ScoreLimit")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("StartedGameId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Lobbies");
                });

            modelBuilder.Entity("Dystopia.Database.Matchmaking.MatchmakingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowCrossPlay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameMode")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("LobbyEntityId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MapPreset")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Platform")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ScoreLimit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LobbyEntityId");

                    b.ToTable("Matchmaking");
                });

            modelBuilder.Entity("Dystopia.Database.News.NewsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Link")
                        .HasColumnType("TEXT");

                    b.Property<int>("NewsType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Dystopia.Database.Replay.UserFavoriteGame", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MarkedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UserFavoriteGames");
                });

            modelBuilder.Entity("PolytopiaBackendBase.Auth.PolytopiaUserViewModel", b =>
                {
                    b.Property<Guid>("PolytopiaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Alias")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowsFriendRequests")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("AvatarStateData")
                        .HasColumnType("BLOB");

                    b.Property<string>("CmUserData")
                        .HasColumnType("TEXT");

                    b.Property<string>("Defeats")
                        .HasColumnType("TEXT");

                    b.Property<int>("Elo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FriendCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GameVersions")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MultiplayerRating")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumFriends")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumGames")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumMultiplayergames")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SteamId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnlockedSkins")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnlockedTribes")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UserMigrated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Victories")
                        .HasColumnType("TEXT");

                    b.HasKey("PolytopiaId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Dystopia.Database.Friendship.FriendshipEntity", b =>
                {
                    b.HasOne("PolytopiaBackendBase.Auth.PolytopiaUserViewModel", "User1")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PolytopiaBackendBase.Auth.PolytopiaUserViewModel", "User2")
                        .WithMany()
                        .HasForeignKey("UserId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Dystopia.Database.Matchmaking.MatchmakingEntity", b =>
                {
                    b.HasOne("Dystopia.Database.Lobby.LobbyEntity", "LobbyEntity")
                        .WithMany()
                        .HasForeignKey("LobbyEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LobbyEntity");
                });

            modelBuilder.Entity("Dystopia.Database.Replay.UserFavoriteGame", b =>
                {
                    b.HasOne("Dystopia.Database.Game.GameEntity", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PolytopiaBackendBase.Auth.PolytopiaUserViewModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
